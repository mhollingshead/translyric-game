{"version":3,"sources":["pages/Home/Home.js","helpers/lyrics.js","helpers/utils.js","components/Round/Round.js","components/Results/Results.js","components/Lives/Lives.js","pages/Game/Game.js","pages/GameOver/GameOver.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","id","onClick","document","querySelector","classList","toggle","to","translateLyrics","text","lang1","lang2","axios","post","q","source","target","shuffle","array","i","length","j","Math","floor","random","temp","Round","state","seconds","handleFormSubmit","e","preventDefault","clearInterval","time","props","checkResults","artist","value","toLowerCase","replaceAll","title","bonus","this","setState","setInterval","style","width","translatedLyrics","map","line","onSubmit","name","placeholder","autoComplete","Component","Result","originalLyrics","languages","nextRound","song","country","flag","lives","langs","language","Game","songs","points","result","message","guess","pointChange","encoder","window","location","match","params","category","newSong","filter","getRoundLyrics","languageOrder","splice","get","then","res","lyricBar","data","mus","split","lyricArr","barText","join","translatedText","catch","console","log","categories","find","c","firstSong","GameOver","highscores","isHighscore","score","decode","Number","JSON","parse","localStorage","getItem","pastScore","push","setItem","stringify","sort","a","b","ind","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"ovGAGe,SAASA,IAIpB,OACI,uBAAMC,UAAU,YAAhB,UACI,oBAAIA,UAAU,WAAd,yBACA,qBAAIA,UAAU,aAAd,wDACI,uBAAMC,GAAG,aAAaC,QAPP,WACvBC,SAASC,cAAc,kBAAoBD,SAASC,cAAc,iBAAiBC,UAAUC,OAAO,cAM5F,mBAAyD,0CAE7D,sBAAKN,UAAU,yBAAf,0FACiF,2CADjF,2FAC0L,6EACtL,qBAAKA,UAAU,4BAInB,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,WAAf,SACI,eAAC,IAAD,CAAMO,GAAG,YAAYP,UAAU,YAA/B,UACI,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,kBAAd,iBACA,wBAAQA,UAAU,2BAAlB,2BAGR,qBAAKA,UAAU,WAAf,SACI,eAAC,IAAD,CAAMO,GAAG,qBAAqBP,UAAU,YAAxC,UACI,oBAAIA,UAAU,aAAd,0BACA,oBAAIA,UAAU,kBAAd,uBACA,wBAAQA,UAAU,2BAAlB,2BAGR,qBAAKA,UAAU,WAAf,SACI,eAAC,IAAD,CAAMO,GAAG,YAAYP,UAAU,YAA/B,UACI,oBAAIA,UAAU,aAAd,0BACA,oBAAIA,UAAU,kBAAd,iBACA,wBAAQA,UAAU,2BAAlB,2BAGR,qBAAKA,UAAU,WAAf,SACI,eAAC,IAAD,CAAMO,GAAG,qBAAqBP,UAAU,YAAxC,UACI,oBAAIA,UAAU,aAAd,0BACA,oBAAIA,UAAU,kBAAd,0BACA,wBAAQA,UAAU,2BAAlB,iC,6DCvCjB,SAASQ,EAAgBC,EAAMC,EAAOC,GACzC,OAAOC,IAAMC,KAAN,yCAAqD,CAACC,EAAGL,EAAMM,OAAQL,EAAOM,OAAQL,ICP1F,SAASM,EAAQC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAI,CACtC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEf,OAAOP,E,UCJUQ,E,4MACjBC,MAAQ,CACJC,QAAS,G,EAsBbC,iBAAmB,SAAAC,GACfA,EAAEC,iBAEFC,cAAc,EAAKC,MAEnB,EAAKC,MAAMC,aAAa,CACpBC,OAAQN,EAAEd,OAAOoB,OAAOC,MAAMC,cAAcC,WAAW,IAAK,IAAIA,WAAW,IAAK,IAAIA,WAAW,IAAK,IACpGC,MAAOV,EAAEd,OAAOwB,MAAMH,MAAMC,cAAcC,WAAW,IAAK,IAAIA,WAAW,IAAK,IAAIA,WAAW,IAAK,IAClGE,MAA4B,GAArB,EAAKd,MAAMC,W,uDAzB1B,WAAqB,IAAD,OAEhBc,KAAKC,SAAS,CAAEf,QAAS,KACzBc,KAAKT,KAAOW,aAAY,WAEO,IAAvB,EAAKjB,MAAMC,SACXI,cAAc,EAAKC,MACnB,EAAKC,MAAMC,aAAa,CAAEC,OAAQ,GAAII,MAAO,GAAIC,MAAO,KAGxD,EAAKE,SAAS,CACVf,QAAU,EAAKD,MAAMC,QAAU,MAGxC,O,oBAeP,WACI,OACI,0BAAS5B,UAAU,QAAnB,UACI,sBAAKA,UAAU,eAAf,UACI,6BAAK0C,KAAKf,MAAMC,UAChB,qBAAK5B,UAAU,qBAAf,SACI,qBAAKA,UAAU,aAAa6C,MAAO,CAACC,MAAQJ,KAAKf,MAAMC,QAAQ,GAAI,IAAI,YAG/E,qBAAK5B,UAAU,aAAf,SAEM0C,KAAKR,MAAMa,iBAAiBC,KAAI,SAACC,GAAD,OAC5B,8BAA0BA,GAAhB3B,KAAKE,eAIzB,uBAAMxB,UAAU,OAAOkD,SAAUR,KAAKb,iBAAtC,UACI,uBAAO7B,UAAU,cAAcmD,KAAK,QAAQlD,GAAG,QAAQmD,YAAY,QAAQC,aAAa,QACxF,uBAAOrD,UAAU,cAAcmD,KAAK,SAASlD,GAAG,SAASmD,YAAY,SAASC,aAAa,QAC3F,wBAAQrD,UAAU,SAAlB,8B,GAvDesD,a,MCDpB,SAASC,EAAT,GAAmF,IAAjEC,EAAgE,EAAhEA,eAAgBT,EAAgD,EAAhDA,iBAAkBU,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,KAKrF,OACI,sBAAK3D,UAAU,SAAf,UACI,qBAAKA,UAAU,eAAf,SACI,gCACI,oBAAIA,UAAU,gBAAd,SAA+B2D,EAAKnB,QACpC,mBAAGxC,UAAU,iBAAb,SAA+B2D,EAAKvB,cAG5C,qBAAKpC,UAAU,WAAf,SAEQwD,GAAkBA,EAAeR,KAAI,SAACC,GAAD,OACjC,8BAA0BA,GAAhB3B,KAAKE,eAI3B,qBAAKxB,UAAU,QAAf,oBACA,qBAAKA,UAAU,aAAf,SAEQ+C,GAAoBA,EAAiBC,KAAI,SAACC,GAAD,OACrC,8BAA0BA,GAAhB3B,KAAKE,eAI3B,sBAAKxB,UAAU,YAAf,UACI,uBAAMA,UAAU,WAAhB,UAA2B,sBAAMA,UAAU,OAAhB,sCAA3B,YAEIyD,GAAaA,EAAUT,KAAI,SAACY,GAAD,OAEvB,cADA,CACA,QAA0B5D,UAAU,WAApC,UAA+C,sBAAMA,UAAU,OAAhB,SAAwB4D,EAAQC,OAA/E,WAAWvC,KAAKE,aAGxB,sBAAMxB,UAAU,OAAhB,yCAEJ,wBAAQE,QArCM,WAElBwD,KAmCoC1D,UAAU,SAA1C,2B,MCtCG,SAASuD,EAAT,GAA4B,IAAVO,EAAS,EAATA,MAC7B,OACI,qBAAK9D,UAAU,QAAf,SAGkB,IAAV8D,EACM,qCAAE,sBAAM9D,UAAU,eAAhB,0BAAwC,sBAAMA,UAAU,eAAhB,0BAAwC,sBAAMA,UAAU,eAAhB,6BAEtE,IAAV8D,EACM,qCAAE,sBAAM9D,UAAU,kCAAhB,0BAA2D,sBAAMA,UAAU,eAAhB,0BAAwC,sBAAMA,UAAU,eAAhB,6BAEzF,IAAV8D,EACM,qCAAE,sBAAM9D,UAAU,kCAAhB,0BAA2D,sBAAMA,UAAU,kCAAhB,0BAA2D,sBAAMA,UAAU,eAAhB,6BACxH,qCAAE,sBAAMA,UAAU,kCAAhB,0BAA2D,sBAAMA,UAAU,kCAAhB,0BAA2D,sBAAMA,UAAU,kCAAhB,+B,YCPxJ+D,G,MAAQ,CACV,CAACC,SAAU,KAAMH,KAAM,4BACvB,CAACG,SAAU,KAAMH,KAAM,4BACvB,CAACG,SAAU,KAAMH,KAAM,4BACvB,CAACG,SAAU,KAAMH,KAAM,4BACvB,CAACG,SAAU,KAAMH,KAAM,4BACvB,CAACG,SAAU,KAAMH,KAAM,8BAINI,E,4MACjBtC,MAAQ,CACJgC,KAAM,KACNO,MAAO,GACPV,eAAgB,GAChBT,iBAAkB,GAClBU,UAAW,GACXU,OAAQ,EACRC,QAAQ,EACRC,QAAS,GACTP,MAAO,G,EAuCX3B,aAAe,SAAAmC,GAEX,IAAMlC,EAAS,EAAKT,MAAMgC,KAAKvB,OAAOE,cAAcC,WAAW,IAAK,IAAIA,WAAW,IAAK,IAAIA,WAAW,IAAK,IACtGC,EAAQ,EAAKb,MAAMgC,KAAKnB,MAAMF,cAAcC,WAAW,IAAK,IAAIA,WAAW,IAAK,IAAIA,WAAW,IAAK,IAE1G,GAAI+B,EAAMlC,SAAWA,GAAUkC,EAAM9B,QAAUA,EAE3C,EAAKG,SAAS,CAAEwB,OAAQ,EAAKxC,MAAMwC,OAAS,IAAMG,EAAM7B,MAAO2B,QAAQ,EAAMC,QAAS,CAAE5D,KAAM,WAAY8D,YAAa,IAAK9B,MAAO6B,EAAM7B,cASzI,GANI6B,EAAMlC,SAAWA,GAAQ,EAAKO,SAAS,CAAEwB,OAAQ,EAAKxC,MAAMwC,OAAS,IAAKC,QAAQ,EAAMN,MAAO,EAAKnC,MAAMmC,MAAQ,EAAGO,QAAS,CAAE5D,KAAM,UAAW8D,YAAa,IAAK9B,MAAO,KAE1K6B,EAAM9B,QAAUA,GAAO,EAAKG,SAAS,CAAEwB,OAAQ,EAAKxC,MAAMwC,OAAS,IAAKC,QAAQ,EAAMN,MAAO,EAAKnC,MAAMmC,MAAQ,EAAGO,QAAS,CAAE5D,KAAM,UAAW8D,YAAa,IAAK9B,MAAO,KAExK6B,EAAMlC,SAAWA,GAAUkC,EAAM9B,QAAUA,GAAO,EAAKG,SAAS,CAAEyB,QAAQ,EAAMN,MAAO,EAAKnC,MAAMmC,MAAQ,EAAGO,QAAS,CAAE5D,KAAM,aAAc8D,YAAa,EAAG9B,MAAO,KAE9I,IAArB,EAAKd,MAAMmC,MAAa,CAExB,IAAMU,EAAUlD,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GAEhD,YADAiD,OAAOC,SAAP,oBAA+B,EAAKxC,MAAMyC,MAAMC,OAAOC,SAAvD,YAAmE,EAAKlD,MAAMwC,OAASK,EAAvF,YAAkGA,M,EAM9Gd,UAAY,WAER,GAAgC,IAA5B,EAAK/B,MAAMuC,MAAM9C,OAArB,CAOA,IAAM0D,EAAU,EAAKnD,MAAMuC,MAAM5C,KAAKC,MAAMD,KAAKE,SAAW,EAAKG,MAAMuC,MAAM9C,SAE7E,EAAKuB,SAAS,CAAEuB,MAAO,EAAKvC,MAAMuC,MAAMa,QAAO,SAAApB,GAAI,OAAIA,EAAKnB,QAAUsC,EAAQtC,SAAQ4B,QAAQ,EAAOrB,iBAAkB,GAAIsB,QAAS,KAEpI,EAAKW,eAAeF,OAXpB,CAEI,IAAMN,EAAUlD,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GAChDiD,OAAOC,SAAP,oBAA+B,EAAKxC,MAAMyC,MAAMC,OAAOC,SAAvD,YAAmE,EAAKlD,MAAMwC,OAASK,EAAvF,YAAkGA,K,oDAlE1G,SAAeb,GAAO,IL7BAvB,EAAQI,EK6BT,OAEXyC,EAAgBhE,EAAQ,GAAD,OAAK8C,IAAQmB,OAAO,EAAG,GAEpDxC,KAAKC,SAAS,CAAEc,UAAWwB,EAAetB,KAAMA,KLjC9BvB,EKmCRuB,EAAKvB,OAAOG,WAAW,IAAK,OLnCZC,EKmCoBmB,EAAKnB,MAAMD,WAAW,IAAK,OLlCtE3B,IAAMuE,IAAN,qDAAwD/C,EAAxD,gBAAsEI,EAAtE,2DKmCE4C,MAAK,SAAAC,GAEF,IAAMC,EAAWD,EAAIE,KAAKC,IAAI,GAAG/E,KAAK8B,WAAW,IAAK,KAAKA,WAAW,KAAM,MAAMA,WAAW,IAAK,KAAKkD,MAAM,MACvGC,EAAWJ,EAASJ,OAAO5D,KAAKC,MAAMD,KAAKE,UAAY,GAAM8D,EAASlE,SAAU,GAChFuE,EAAUD,EAASE,KAAK,QAI9B,OAHA,EAAKjD,SAAS,CAAEa,eAAgBkC,IAGzBlF,EAAgBmF,EAAS,KAAMV,EAAc,GAAGjB,aAG1DoB,MAAM,SAAAC,GAAG,OAAI7E,EAAgB6E,EAAIE,KAAKM,eAAetD,WAAW,KAAM,QAAS0C,EAAc,GAAGjB,SAAUiB,EAAc,GAAGjB,aAE3HoB,MAAK,SAAAC,GAAG,OAAI7E,EAAgB6E,EAAIE,KAAKM,eAAetD,WAAW,KAAM,QAAS0C,EAAc,GAAGjB,SAAU,SAEzGoB,MAAK,SAAAC,GAAG,OAAI,EAAK1C,SAAS,CAAEI,iBAAkBsC,EAAIE,KAAKM,eAAeJ,MAAM,WAC5EK,OAAM,SAAAhE,GAAC,OAAIiE,QAAQC,IAAIlE,Q,+BAEhC,WAAqB,IAAD,OAEZoC,EAAQjD,EAAQ,YAAIgF,EAAWC,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,WAAa,EAAK3C,MAAMyC,MAAMC,OAAOC,YAAUX,QAExFkC,EAAYlC,EAAM5C,KAAKC,MAAMD,KAAKE,SAAW0C,EAAM9C,SAEzDsB,KAAKC,SAAS,CAAEuB,MAAOA,EAAMa,QAAO,SAAApB,GAAI,OAAIA,EAAKnB,QAAU4D,EAAU5D,WAErEE,KAAKsC,eAAeoB,K,oBA4CxB,WACI,OACE,qBAAKpG,UAAU,OAAO6C,MAAO,CAACkC,OAAO,aAAD,OAAezD,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAAjD,SAApC,SACE,sBAAKxB,UAAU,gBAAf,UACI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,oBAAIA,UAAU,cAAd,wBACA,sBAAMA,UAAU,cAAhB,SAA+B0C,KAAKf,MAAMwC,YAE7CzB,KAAKf,MAAM0C,QAAQ5D,MAAS,sBAAKT,UAAU,eAAf,UACzB,sBAAMA,UAAU,kBAAhB,SAAmC0C,KAAKf,MAAM0C,QAAQ5D,OACpDiC,KAAKf,MAAM0C,QAAQE,YAAc,GAAK,sBAAMvE,UAAU,iBAAhB,oBAAsC0C,KAAKf,MAAM0C,QAAQE,eAC/F7B,KAAKf,MAAM0C,QAAQ5B,MAAQ,GAAK,sBAAMzC,UAAU,gBAAhB,qBAAsC0C,KAAKf,MAAM0C,QAAQ5B,MAAzD,gBAEtC,qBAAKzC,UAAU,cAAf,SACI,cAAC,EAAD,CAAO8D,MAAOpB,KAAKf,MAAMmC,aAI7BpB,KAAKf,MAAMoB,iBAAiB3B,OAAS,EAE9BsB,KAAKf,MAAMyC,OACR,cAACb,EAAD,CAASC,eAAgBd,KAAKf,MAAM6B,eAAgBT,iBAAkBL,KAAKf,MAAMoB,iBAAkBU,UAAWf,KAAKf,MAAM8B,UAAWE,KAAMjB,KAAKf,MAAMgC,KAAMD,UAAWhB,KAAKgB,UAAWW,QAAS3B,KAAKf,MAAM0C,UAC1M,cAAC,EAAD,CAAOtB,iBAAkBL,KAAKf,MAAMoB,iBAAkBZ,aAAcO,KAAKP,eAC7E,sBAAKnC,UAAU,UAAf,UAAyB,qBAAKA,UAAU,gBAAf,oBAAsC,qBAAKA,UAAU,gBAAf,oC,GAlHvDsD,aCdb+C,G,kNACjB1E,MAAQ,CACJ2E,WAAY,GACZC,aAAa,EACbC,MAAO,M,uDAEX,WAEI,IAAM3B,EAAWnC,KAAKR,MAAMyC,MAAMC,OAAOC,SAEnC4B,EAAS/D,KAAKR,MAAMyC,MAAMC,OAAO3E,GAAGwF,MAAM,KAC1Ce,EAAQE,OAAOD,EAAO,IAAMC,OAAOD,EAAO,IAE1CH,EAAaK,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,MAE9DP,GAAeD,EAAWJ,MAAK,SAAAa,GAAS,OAAIA,EAAUP,MAAQA,KAEpEF,EAAWU,KAAK,CAAEnC,SAAUA,EAAU2B,MAAOA,IAC7C9D,KAAKC,SAAS,CAAE2D,WAAYA,EAAYC,YAAaA,EAAaC,MAAOA,IACzEK,aAAaI,QAAQ,aAAcN,KAAKO,UAAUZ,M,oBAEtD,WACI,OACI,uBAAMtG,UAAU,YAAhB,UACI,oBAAIA,UAAU,oBAAd,wBACA,sBAAKA,UAAU,kBAAf,UACI,oBAAIA,UAAU,mBAAd,0BACC0C,KAAKf,MAAM6E,OAAS,oBAAGxG,UAAU,mBAAb,UAAiC0C,KAAKf,MAAM4E,YAAc,sBAAMvG,UAAU,YAAhB,oBAAuC,6BAAO0C,KAAKf,MAAM6E,SACvI9D,KAAKf,MAAM2E,YAAc,sBAAKtG,UAAU,cAAf,UACtB,oBAAIA,UAAU,mBAAd,+BAEI0C,KAAKf,MAAM2E,WAAWa,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEb,MAAQY,EAAEZ,SAAOxD,KAAI,SAACwD,EAAOc,GAEhE,OAAIA,EAAM,EACN,sBAAKtH,UAAU,mBAAf,UACI,qBAAKA,UAAU,qBAAf,SAAqCwG,EAAMA,QAC3C,qBAAKxG,UAAU,wBAAf,SAAwCwG,EAAM3B,SAAStC,WAAW,IAAK,SAFpCjB,KAAKE,SAAS8F,GAK7C,cAK5B,cAAC,IAAD,CAAM/G,GAAG,IAAIP,UAAU,sBAAvB,+B,GA5CsBsD,cCcvBiE,MAZf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3H,IACjC,cAAC,IAAD,CAAOyH,KAAK,kBAAkBE,UAAWzD,IACzC,cAAC,IAAD,CAAOuD,KAAK,0BAA0BE,UAAWrB,UCA1CsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlI,SAASmI,eAAe,SAM1BX,M","file":"static/js/main.55fa580c.chunk.js","sourcesContent":["import './Home.scss'\nimport { Link } from 'react-router-dom';\n\nexport default function Home() {\n    const toggleInstructions = () => {\n        document.querySelector('.instructions') && document.querySelector('.instructions').classList.toggle('invisible');\n    }\n    return (\n        <main className=\"home-page\">\n            <h1 className=\"app-name\">Translyric!</h1>\n            <h2 className=\"app-slogan\">Test your knowledge of popular songs with a\n                <span id=\"h2--bolded\" onClick={toggleInstructions}> twist<sup>?</sup></span>\n            </h2>\n            <div className=\"instructions invisible\">\n                We'll show you a random section of lyrics from a popular song that have been <b>translated</b> into a random language multiple times before finally being translated back to english. <i>Can you guess the song before time runs out?</i>\n                <div className=\"instructions__sample\">\n                    {/* You've got a smile that could light up this whole town → Your smile burns the city */}\n                </div>\n            </div>\n            <div className=\"categories\">\n                <div className=\"category\">\n                    <Link to=\"/game/pop\" className=\"game-path\">\n                        <h1 className=\"music-type\">✨</h1>\n                        <h3 className=\"music-type-text\">Pop</h3>\n                        <button className=\"game-path__button button\">Play Now</button>\n                    </Link>\n                </div>\n                <div className=\"category\">\n                    <Link to=\"/game/hits-of-2010\" className=\"game-path\">\n                        <h1 className=\"music-type\">🎤</h1>\n                        <h3 className=\"music-type-text\">2010 Hits</h3>\n                        <button className=\"game-path__button button\">Play Now</button>\n                    </Link>\n                </div>\n                <div className=\"category\">\n                    <Link to=\"/game/rap\" className=\"game-path\">\n                        <h1 className=\"music-type\">🎵</h1>\n                        <h3 className=\"music-type-text\">Rap</h3>\n                        <button className=\"game-path__button button\">Play Now</button>\n                    </Link>\n                </div>\n                <div className=\"category\">\n                    <Link to=\"/game/classic-rock\" className=\"game-path\">\n                        <h1 className=\"music-type\">🎸</h1>\n                        <h3 className=\"music-type-text\">Classic Rock</h3>\n                        <button className=\"game-path__button button\">Play Now</button>\n                    </Link>\n                </div>\n            </div>\n        </main>\n    );\n}","import axios from \"axios\";\n\nexport function getLyrics(artist, title) {\n    return axios.get(`https://api.vagalume.com.br/search.php?art=${artist}&mus=${title}&extra=relart&apikey=8ae936b91f65a1f7b5ffd12f2e1b188f`)\n}\n\nexport function translateLyrics(text, lang1, lang2) {\n    return axios.post(`https://translate.astian.org/translate`, {q: text, source: lang1, target: lang2});\n}","export function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n    return array;\n}","import { Component } from 'react';\nimport './Round.scss';\n\nexport default class Round extends Component {\n    state = {\n        seconds: 0\n    };\n\n    time;\n\n    componentDidMount() {\n        // setInterval for timer when component mounts\n        this.setState({ seconds: 30 });\n        this.time = setInterval(() => {\n            // if time runs out, clearInterval and advance to round results\n            if (this.state.seconds === 1) {\n                clearInterval(this.time);\n                this.props.checkResults({ artist: \"\", title: \"\", bonus: 0 });\n            } else {\n                // otherwise decrement timer\n                this.setState({\n                    seconds: (this.state.seconds - 1)\n                })\n            }\n        }, 1000);\n    }\n    // handle answer submission\n    handleFormSubmit = e => {\n        e.preventDefault();\n        // stop timer\n        clearInterval(this.time);\n        // advance to roundResults, check player guess and send time bonus\n        this.props.checkResults({ \n            artist: e.target.artist.value.toLowerCase().replaceAll(\" \", \"\").replaceAll(\"'\", \"\").replaceAll(\".\", \"\"), \n            title: e.target.title.value.toLowerCase().replaceAll(\" \", \"\").replaceAll(\"'\", \"\").replaceAll(\".\", \"\"), \n            bonus: this.state.seconds * 10\n        });\n    }\n\n    render() {\n        return (\n            <section className=\"round\">\n                <div className=\"round__timer\">\n                    <h2>{this.state.seconds}</h2>\n                    <div className=\"round__bar-wrapper\">\n                        <div className=\"round__bar\" style={{width: (this.state.seconds/30)*100+\"%\"}}></div>\n                    </div>\n                </div>\n                <div className=\"translated\">\n                    {\n                      this.props.translatedLyrics.map((line) => (\n                          <div key={Math.random()}>{line}</div>\n                      ))\n                    }\n                </div>\n                <form className=\"form\" onSubmit={this.handleFormSubmit}>\n                    <input className=\"form__input\" name=\"title\" id=\"title\" placeholder=\"Title\" autoComplete=\"off\"></input>\n                    <input className=\"form__input\" name=\"artist\" id=\"artist\" placeholder=\"Artist\" autoComplete=\"off\"></input>\n                    <button className=\"button\">SUBMIT</button>\n                </form>\n            </section>\n        );\n    }\n}","import './Results.scss';\n\nexport default function Result({ originalLyrics, translatedLyrics, languages, nextRound, song }) {\n    const handleOnClick = () => {\n        // proceed to new round\n        nextRound();\n    }\n    return (\n        <div className=\"result\">\n            <div className=\"result__head\">\n                <div>\n                    <h2 className=\"result__title\">{song.title}</h2>\n                    <p className=\"result__artist\">{song.artist}</p>\n                </div>\n            </div>\n            <div className=\"original\">\n                {\n                    originalLyrics && originalLyrics.map((line) => (\n                        <div key={Math.random()}>{line}</div>\n                    ))\n                }\n            </div>\n            <div className=\"arrow\">→</div>\n            <div className=\"translated\">\n                {\n                    translatedLyrics && translatedLyrics.map((line) => (\n                        <div key={Math.random()}>{line}</div>\n                    ))\n                }\n            </div>\n            <div className=\"languages\">\n                <span className=\"language\"><span className=\"flag\">🇺🇸</span>→</span>\n                {\n                    languages && languages.map((country) => (\n                        // show the translation history\n                        <span key={Math.random()} className=\"language\"><span className=\"flag\">{country.flag}</span>→</span>\n                    ))\n                }\n                <span className=\"flag\">🇺🇸</span>\n            </div>\n            <button onClick={handleOnClick} className=\"button\">NEXT ROUND</button>\n        </div>\n    );\n}","import './Lives.scss';\n\nexport default function Result({ lives }) {\n    return (\n        <div className=\"lives\">\n            {\n                // this can't be the best way to do this but it works for now\n                lives === 3\n                    ? <><span className=\"lives__heart\">❤️</span><span className=\"lives__heart\">❤️</span><span className=\"lives__heart\">❤️</span></>\n                    : (\n                        lives === 2\n                            ? <><span className=\"lives__heart lives__heart--gone\">❤️</span><span className=\"lives__heart\">❤️</span><span className=\"lives__heart\">❤️</span></>\n                            : (\n                                lives === 1\n                                    ? <><span className=\"lives__heart lives__heart--gone\">❤️</span><span className=\"lives__heart lives__heart--gone\">❤️</span><span className=\"lives__heart\">❤️</span></>\n                                    : <><span className=\"lives__heart lives__heart--gone\">❤️</span><span className=\"lives__heart lives__heart--gone\">❤️</span><span className=\"lives__heart lives__heart--gone\">❤️</span></>\n                            )\n                    )\n            }\n        </div>\n    );\n}","import { Component } from 'react';\nimport { getLyrics, translateLyrics } from '../../helpers/lyrics';\nimport { shuffle } from '../../helpers/utils';\nimport Round from '../../components/Round';\nimport Results from '../../components/Results';\nimport Lives from '../../components/Lives';\nimport categories from '../../data/categories.json';\nimport './Game.scss';\nconst langs = [\n    {language: 'de', flag: '🇩🇪'},\n    {language: 'zh', flag: '🇨🇳'}, \n    {language: 'ja', flag: '🇯🇵'}, \n    {language: 'ko', flag: '🇰🇷'}, \n    {language: 'ru', flag: '🇷🇺'}, \n    {language: 'hi', flag: '🇮🇳'}\n];\n// {language: 'es', flag: '🇪🇸'}, {language: 'it', flag: '🇮🇹'}, {language: 'fr', flag: '🇫🇷'},\n\nexport default class Game extends Component {\n    state = {\n        song: null,\n        songs: [],\n        originalLyrics: [],\n        translatedLyrics: [],\n        languages: [],\n        points: 0,\n        result: false,\n        message: {},\n        lives: 3\n    }\n    // makes the API calls and sets the state for the game logic\n    getRoundLyrics(song) {\n        // Get 2 random languages for translation\n        const languageOrder = shuffle([...langs]).splice(0, 2);\n        // Update state with language, song information\n        this.setState({ languages: languageOrder, song: song });\n        // First API call get's the song lyrics\n        getLyrics(song.artist.replaceAll(\" \", \"%20\"), song.title.replaceAll(\" \", \"%20\"))\n            .then(res => {\n                // Get's rid of unwanted characters and converts to an 8-line array\n                const lyricBar = res.data.mus[0].text.replaceAll(\"?\", \"'\").replaceAll(\"''\", \"',\").replaceAll(\"-\", \" \").split(\"\\n\");\n                const lyricArr = lyricBar.splice(Math.floor(Math.random() * (0.5 * lyricBar.length)), 8)\n                const barText = lyricArr.join(\" \\n \");\n                this.setState({ originalLyrics: lyricArr })\n                // Four translate API calls are chained\n                // The first is english -> random language 1\n                return translateLyrics(barText, \"en\", languageOrder[0].language);\n            })\n            // then random language 1 -> random language 2\n            .then (res => translateLyrics(res.data.translatedText.replaceAll('\\n', ' \\n '), languageOrder[0].language, languageOrder[1].language))\n            // random language 2 -> back to english\n            .then(res => translateLyrics(res.data.translatedText.replaceAll('\\n', ' \\n '), languageOrder[1].language, \"en\"))\n            // update state with the translated lyric array\n            .then(res => this.setState({ translatedLyrics: res.data.translatedText.split(\"\\n\") }))\n            .catch(e => console.log(e));\n    }\n    componentDidMount() {\n        // get the song list for the given category and shuffle\n        let songs = shuffle([...categories.find(c => c.category === this.props.match.params.category).songs]);\n        // choose a random song to start\n        const firstSong = songs[Math.floor(Math.random() * songs.length)];\n        // set state.songs with filtered song array\n        this.setState({ songs: songs.filter(song => song.title !== firstSong.title) });\n        // make the API calls / update state to begin the first round\n        this.getRoundLyrics(firstSong);\n    }\n    // check the player's guess and update the score\n    checkResults = guess => {\n        // convert the artist / title to lowercase, remove spaces, 's, .s, etc...\n        const artist = this.state.song.artist.toLowerCase().replaceAll(\" \", \"\").replaceAll(\"'\", \"\").replaceAll(\".\", \"\");\n        const title = this.state.song.title.toLowerCase().replaceAll(\" \", \"\").replaceAll(\"'\", \"\").replaceAll(\".\", \"\");\n        // update points / result message for a winning round\n        if (guess.artist === artist && guess.title === title) {\n            // correct artist and title, + 500 points + secondsRemaining * 10 bonus points\n            this.setState({ points: this.state.points + 600 + guess.bonus, result: true, message: { text: \"Correct!\", pointChange: 600, bonus: guess.bonus } });\n        } else {\n            // correct artist only, + 150 points, lives--\n            if (guess.artist === artist) this.setState({ points: this.state.points + 150, result: true, lives: this.state.lives - 1, message: { text: \"Almost!\", pointChange: 150, bonus: 0 } });\n            // correct title only, + 150 points, lives--\n            if (guess.title === title) this.setState({ points: this.state.points + 150, result: true, lives: this.state.lives - 1, message: { text: \"Almost!\", pointChange: 150, bonus: 0 } });\n            // completely incorrect, lives--\n            if (guess.artist !== artist && guess.title !== title) this.setState({ result: true, lives: this.state.lives - 1, message: { text: \"Try Again!\", pointChange: 0, bonus: 0 } });\n            // if player out of lives, encode score for gameover url param and end game\n            if (this.state.lives === 0) {\n                // score is multiplied by a random number and later divided by it in gameover page\n                const encoder = Math.floor(Math.random() * 12 + 1);\n                window.location = `/gameover/${this.props.match.params.category}/${this.state.points * encoder}a${encoder}`;\n                return;\n            }\n        }\n    }\n    // from results page, continue to next round\n    nextRound = () => {\n        // if no more songs left refill the array\n        if (this.state.songs.length === 0) {\n            // score is multiplied by a random number and later divided by it in gameover page\n            const encoder = Math.floor(Math.random() * 12 + 1);\n            window.location = `/gameover/${this.props.match.params.category}/${this.state.points * encoder}a${encoder}`;\n            return;\n        }\n        // pick the new song from the array randomly\n        const newSong = this.state.songs[Math.floor(Math.random() * this.state.songs.length)];\n        // update the state with the filtered song array, reset round values\n        this.setState({ songs: this.state.songs.filter(song => song.title !== newSong.title), result: false, translatedLyrics: [], message: {} });\n        // do API calls / game logic for new song\n        this.getRoundLyrics(newSong);\n    }\n\n    render() {\n        return (\n          <div className=\"game\" style={{filter: `hueRotate(${Math.floor(Math.random() * 720) - 360}deg)`}}>\n            <div className=\"game__content\">\n                <div className=\"game__head\">\n                    <div className=\"game__game-score\">\n                        <h3 className=\"game__label\">Score:&nbsp;</h3>\n                        <span className=\"game__score\">{this.state.points}</span>\n                    </div>\n                    {this.state.message.text && (<div className=\"game__result\">\n                        <span className=\"result__message\">{this.state.message.text}</span>\n                        { this.state.message.pointChange > 0 && <span className=\"result__points\">{`+${this.state.message.pointChange}`}</span> }\n                        { this.state.message.bonus > 0 && <span className=\"result__bonus\">{`(+${this.state.message.bonus} Bonus)`}</span> }\n                    </div>)}\n                    <div className=\"game__lives\">\n                        <Lives lives={this.state.lives}/>\n                    </div>\n                </div>\n                { \n                    this.state.translatedLyrics.length > 0 \n                        // either show new round, round results, or loading animation while we wait for the APIs\n                        ? (this.state.result\n                            ? <Results originalLyrics={this.state.originalLyrics} translatedLyrics={this.state.translatedLyrics} languages={this.state.languages} song={this.state.song} nextRound={this.nextRound} message={this.state.message} />\n                            : <Round translatedLyrics={this.state.translatedLyrics} checkResults={this.checkResults} />)\n                        : <div className=\"loading\"><div className=\"loading__icon\">↺</div><div className=\"loading__text\">Loading...</div></div>\n                }\n            </div>\n          </div>\n        );\n    }\n}","import { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './GameOver.scss';\n\nexport default class GameOver extends Component {\n    state = {\n        highscores: [],\n        isHighscore: false,\n        score: null \n    }\n    componentDidMount() {\n        // get leaderboard info from url params\n        const category = this.props.match.params.category;\n        // decode the score \n        const decode = this.props.match.params.id.split('a');\n        const score = Number(decode[0]) / Number(decode[1]);\n        // get all highscores from localStorage\n        const highscores = JSON.parse(localStorage.getItem(\"highscores\") || \"[]\");\n        // check to see if this score is a new high score\n        const isHighscore = !highscores.find(pastScore => pastScore.score > score);\n        // push new score, update state, update localStorage\n        highscores.push({ category: category, score: score });\n        this.setState({ highscores: highscores, isHighscore: isHighscore, score: score });\n        localStorage.setItem(\"highscores\", JSON.stringify(highscores));\n    }\n    render () {\n        return (\n            <main className=\"game-over\">\n                <h2 className=\"game-over__header\">Game Over!</h2>\n                <div className=\"game-over__body\">\n                    <h3 className=\"game-over__title\">Final Score:</h3>\n                    {this.state.score && <p className=\"game-over__score\">{this.state.isHighscore ? <span className=\"highscore\">⭐</span> : <></>}{this.state.score}</p>}\n                    {this.state.highscores && <div className=\"leaderboard\">\n                        <h3 className=\"game-over__title\">Your High Scores:</h3>\n                        {\n                            this.state.highscores.sort((a, b) => b.score - a.score).map((score, ind) => {\n                                // show top 3 scores\n                                if (ind < 3) return (\n                                    <div className=\"leaderboard__row\" key={Math.random()+ind}>\n                                        <div className=\"leaderboard__score\">{score.score}</div>\n                                        <div className=\"leaderboard__category\">{score.category.replaceAll(\"-\", \" \")}</div>\n                                    </div>\n                                )\n                                else return null\n                            })\n                        }\n                    </div>}\n                </div>\n                <Link to=\"/\" className=\"button button--link\">PLAY AGAIN</Link>\n            </main>\n        );\n    }\n}","import './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Game from './pages/Game';\nimport GameOver from './pages/GameOver';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/game/:category\" component={Game} />\n        <Route path=\"/gameover/:category/:id\" component={GameOver} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}